// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gofast.proto

/*
	Package server is a generated protocol buffer package.

	Gofast

	Gofast defines some messages and services
	and is generated using protoc-gen-gofast.

	It is generated from these files:
		gofast.proto

	It has these top-level messages:
		TestRequest
		TestReply
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/johanbrandhorst/gogoproto-experiments/gofast/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TestRequest is a simple message
type TestRequest struct {
	// Id is the Id of the request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptorGofast, []int{0} }

func (m *TestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TestReply struct {
	// RequestTime is the time of the request.
	RequestTime *google_protobuf2.Timestamp `protobuf:"bytes,1,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
}

func (m *TestReply) Reset()                    { *m = TestReply{} }
func (m *TestReply) String() string            { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()               {}
func (*TestReply) Descriptor() ([]byte, []int) { return fileDescriptorGofast, []int{1} }

func (m *TestReply) GetRequestTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.RequestTime
	}
	return nil
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "gofast.TestRequest")
	proto.RegisterType((*TestReply)(nil), "gofast.TestReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	// TestMethod is a simple unary method.
	TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
	// Empty is a method with no input.
	Empty(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*TestReply, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/gofast.TestService/TestMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Empty(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/gofast.TestService/Empty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	// TestMethod is a simple unary method.
	TestMethod(context.Context, *TestRequest) (*TestReply, error)
	// Empty is a method with no input.
	Empty(context.Context, *google_protobuf1.Empty) (*TestReply, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_TestMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofast.TestService/TestMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestMethod(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofast.TestService/Empty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Empty(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gofast.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestMethod",
			Handler:    _TestService_TestMethod_Handler,
		},
		{
			MethodName: "Empty",
			Handler:    _TestService_Empty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gofast.proto",
}

func (m *TestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGofast(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *TestReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGofast(dAtA, i, uint64(m.RequestTime.Size()))
		n1, err := m.RequestTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintGofast(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGofast(uint64(l))
	}
	return n
}

func (m *TestReply) Size() (n int) {
	var l int
	_ = l
	if m.RequestTime != nil {
		l = m.RequestTime.Size()
		n += 1 + l + sovGofast(uint64(l))
	}
	return n
}

func sovGofast(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGofast(x uint64) (n int) {
	return sovGofast(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGofast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGofast
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGofast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGofast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGofast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGofast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestTime == nil {
				m.RequestTime = &google_protobuf2.Timestamp{}
			}
			if err := m.RequestTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGofast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGofast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGofast(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGofast
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGofast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGofast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGofast
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGofast
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGofast(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGofast = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGofast   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gofast.proto", fileDescriptorGofast) }

var fileDescriptorGofast = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xed, 0x91, 0x5d, 0xd8, 0x4e, 0x76, 0xc5, 0xf6, 0x0f, 0x32, 0xea, 0xb8, 0xe4, 0x24,
	0x62, 0xa6, 0xdd, 0x78, 0x13, 0x54, 0x14, 0x44, 0x5c, 0x10, 0x64, 0xcc, 0x49, 0x04, 0xe9, 0xc9,
	0x54, 0x7a, 0x5a, 0x32, 0x53, 0x6d, 0x77, 0x25, 0x3a, 0x57, 0x1f, 0x41, 0x2f, 0x3e, 0x80, 0x77,
	0x5f, 0xc3, 0xa3, 0xe0, 0x0b, 0x48, 0xf4, 0x41, 0x64, 0x7a, 0x26, 0xa0, 0xc6, 0xd3, 0x9e, 0x8a,
	0xaa, 0xef, 0xe3, 0xab, 0x1f, 0x1f, 0x1f, 0x6a, 0x9c, 0x2b, 0x4f, 0xa9, 0x75, 0x48, 0x28, 0x76,
	0xbb, 0x2d, 0xbe, 0xa2, 0x11, 0xf5, 0x02, 0xa4, 0xb2, 0x46, 0xaa, 0xba, 0x46, 0x52, 0x64, 0xb0,
	0xf6, 0x9d, 0x2b, 0xbe, 0xdc, 0xab, 0x61, 0xcb, 0x97, 0x73, 0x09, 0x95, 0xa5, 0xa6, 0x17, 0xaf,
	0xfd, 0x2b, 0x92, 0xa9, 0xc0, 0x93, 0xaa, 0x6c, 0x6f, 0xb8, 0x19, 0xc6, 0x6c, 0xac, 0xa1, 0x1e,
	0xfb, 0xb7, 0x4a, 0x6b, 0x70, 0x12, 0x6d, 0xc8, 0xdf, 0xfe, 0x35, 0xba, 0xca, 0x07, 0x53, 0xf0,
	0x94, 0xc1, 0x9b, 0x25, 0x78, 0x12, 0x07, 0x3c, 0x32, 0xc5, 0x25, 0x76, 0xc8, 0xae, 0xef, 0x65,
	0x91, 0x29, 0x46, 0xc7, 0x7c, 0xaf, 0x93, 0xed, 0xa2, 0x11, 0x77, 0xf9, 0xd0, 0x75, 0xbe, 0x57,
	0xed, 0xd3, 0x60, 0x1b, 0x4c, 0xe2, 0xb4, 0x23, 0x4a, 0x37, 0x44, 0xe9, 0x74, 0x43, 0x94, 0x0d,
	0x7a, 0x7f, 0x7b, 0x99, 0x7c, 0x66, 0xdd, 0xaf, 0xe7, 0xe0, 0x56, 0x66, 0x06, 0xe2, 0x98, 0xf3,
	0x76, 0x7d, 0x0a, 0x54, 0x62, 0x21, 0xce, 0xa5, 0x7d, 0x53, 0x7f, 0xe0, 0xc4, 0x67, 0xff, 0x3e,
	0xda, 0x45, 0x33, 0x3a, 0xff, 0xfe, 0xfb, 0xaf, 0x8f, 0xd1, 0x81, 0x18, 0x86, 0xf2, 0x56, 0x47,
	0x92, 0x5a, 0xee, 0x27, 0x7c, 0xe7, 0x51, 0x5b, 0x92, 0xb8, 0xb8, 0x45, 0x13, 0xee, 0xff, 0x4b,
	0xba, 0x10, 0x92, 0xce, 0x88, 0xfd, 0x4d, 0x52, 0xa8, 0xf9, 0xe1, 0x17, 0xf6, 0xe1, 0xc1, 0x4b,
	0xb1, 0x33, 0x39, 0x7d, 0x94, 0xde, 0xba, 0xc1, 0x22, 0xf7, 0x8c, 0xef, 0x3f, 0xc6, 0xc3, 0x0c,
	0x2c, 0x7a, 0x43, 0xe8, 0x1a, 0x71, 0xbf, 0x24, 0xb2, 0xfe, 0x8e, 0x94, 0xda, 0x50, 0xb9, 0xcc,
	0xd3, 0x19, 0x56, 0xf2, 0x35, 0x96, 0xaa, 0xce, 0x9d, 0xaa, 0x8b, 0x12, 0x9d, 0x27, 0xa9, 0x51,
	0x63, 0x20, 0x18, 0xc3, 0x3b, 0x0b, 0xce, 0x54, 0x50, 0x93, 0x97, 0x1d, 0xc2, 0xd7, 0x75, 0xc2,
	0xbe, 0xad, 0x13, 0xf6, 0x63, 0x9d, 0xb0, 0x4f, 0x3f, 0x93, 0x53, 0x2f, 0xee, 0x9d, 0x30, 0x48,
	0x7a, 0x70, 0x2b, 0x70, 0xf9, 0x6e, 0x30, 0xdc, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x41,
	0xe6, 0x7d, 0x6c, 0x02, 0x00, 0x00,
}
