syntax = "proto3";

// Gogo
//
// Gogo defines some messages and services
// and is generated by protoc-gen-gogo.
package gogo;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/johanbrandhorst/gogoproto-experiments/gogo";
    description: "GoGo Repository";
  }
  schemes: HTTPS;
};

// Correct import path
option go_package = "github.com/johanbrandhorst/gogoproto-experiments/gogo/server";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method.
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf
// for the grpc-gateway.
option (gogoproto.goproto_registration) = true;

// TestService exposes some test methods
service TestService {
    // TestMethod is a simple unary method.
    rpc TestMethod(TestRequest) returns (TestReply) {
        option (google.api.http) = {
            get: "/api/v1/test"
        };
    }
    // Empty is a method with no input.
    rpc Empty(google.protobuf.Empty) returns (TestReply) {
        option (google.api.http) = {
            get: "/api/v1/empty"
        };
    }
}

// TestRequest is a simple message
message TestRequest {
    // ID is the ID of the request.
    string id = 1;
}

message TestReply {
    // RequestTime is the time of the request.
    google.protobuf.Timestamp request_time = 1 [
         (gogoproto.stdtime) = true
    ];
}
