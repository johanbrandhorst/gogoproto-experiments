// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.proto

/*
Package server is a generated protocol buffer package.

Go

Go defines some messages and services
and is generated using protoc-gen-go.

It is generated from these files:
	go.proto

It has these top-level messages:
	TestRequest
	TestReply
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TestRequest is a simple message
type TestRequest struct {
	// Id is the Id of the request.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TestReply struct {
	// RequestTime is the time of the request.
	RequestTime *google_protobuf2.Timestamp `protobuf:"bytes,1,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
}

func (m *TestReply) Reset()                    { *m = TestReply{} }
func (m *TestReply) String() string            { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()               {}
func (*TestReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestReply) GetRequestTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.RequestTime
	}
	return nil
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "go.TestRequest")
	proto.RegisterType((*TestReply)(nil), "go.TestReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	// TestMethod is a simple unary method.
	TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
	// Empty is a method with no input.
	Empty(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*TestReply, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/go.TestService/TestMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Empty(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/go.TestService/Empty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	// TestMethod is a simple unary method.
	TestMethod(context.Context, *TestRequest) (*TestReply, error)
	// Empty is a method with no input.
	Empty(context.Context, *google_protobuf1.Empty) (*TestReply, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_TestMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.TestService/TestMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestMethod(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.TestService/Empty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Empty(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestMethod",
			Handler:    _TestService_TestMethod_Handler,
		},
		{
			MethodName: "Empty",
			Handler:    _TestService_Empty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.proto",
}

func init() { proto.RegisterFile("go.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0x99, 0x91, 0x88, 0xe9, 0xfc, 0x83, 0x46, 0x45, 0x46, 0xc5, 0x90, 0x93, 0x88, 0xe9,
	0x36, 0xf1, 0x16, 0xf1, 0x60, 0x20, 0x08, 0xa2, 0x97, 0x31, 0x07, 0xf1, 0x22, 0x33, 0x99, 0xb2,
	0xa7, 0x25, 0x33, 0xd5, 0x76, 0x57, 0xa2, 0x73, 0xf5, 0x11, 0xdc, 0xc3, 0xee, 0x7b, 0xed, 0x2b,
	0xec, 0x83, 0x2c, 0xd3, 0x33, 0x61, 0x97, 0xe4, 0xb6, 0xa7, 0xa6, 0xea, 0xfb, 0xfa, 0xfb, 0x7e,
	0x14, 0x7b, 0xa0, 0x50, 0x18, 0x8b, 0x84, 0x3c, 0x54, 0x18, 0x3d, 0x53, 0x88, 0x6a, 0x0b, 0x32,
	0x31, 0x5a, 0x26, 0x65, 0x89, 0x94, 0x90, 0xc6, 0xd2, 0x35, 0x8e, 0xe8, 0x69, 0xab, 0xfa, 0x29,
	0xdd, 0xfd, 0x94, 0x50, 0x18, 0xaa, 0x5a, 0xf1, 0xc5, 0xb1, 0x48, 0xba, 0x00, 0x47, 0x49, 0x61,
	0x5a, 0xc3, 0x6b, 0xff, 0x6c, 0xa6, 0x0a, 0xca, 0xa9, 0xfb, 0x93, 0x28, 0x05, 0x56, 0xa2, 0xf1,
	0xf9, 0xa7, 0x5d, 0x93, 0xe7, 0xac, 0xb7, 0x06, 0x47, 0x31, 0xfc, 0xde, 0x81, 0x23, 0x3e, 0x64,
	0xa1, 0xce, 0x9e, 0x04, 0xe3, 0xe0, 0x65, 0x37, 0x0e, 0x75, 0x36, 0xf9, 0xc4, 0xba, 0x8d, 0x6c,
	0xb6, 0x15, 0x7f, 0xcf, 0xfa, 0xb6, 0xf1, 0xfd, 0xa8, 0x4b, 0xbd, 0xad, 0x37, 0x8f, 0x44, 0x43,
	0x24, 0x0e, 0x44, 0x62, 0x7d, 0x20, 0x8a, 0x7b, 0xad, 0xbf, 0xde, 0xcc, 0x2f, 0x82, 0xa6, 0xeb,
	0x2b, 0xd8, 0xbd, 0xde, 0x00, 0x5f, 0x32, 0x56, 0x8f, 0x5f, 0x80, 0x72, 0xcc, 0xf8, 0x48, 0x28,
	0x14, 0xb7, 0x50, 0xa2, 0xc1, 0xcd, 0xc2, 0x6c, 0xab, 0xc9, 0xc3, 0x7f, 0x97, 0x57, 0x67, 0xe1,
	0x90, 0xf7, 0xfd, 0xd1, 0xf6, 0x33, 0x49, 0x35, 0xef, 0x8a, 0x75, 0x56, 0xf5, 0x71, 0xf8, 0xe3,
	0x13, 0x0a, 0xbf, 0x3f, 0x4e, 0x79, 0xe4, 0x53, 0x46, 0x7c, 0x70, 0x48, 0xf1, 0xa7, 0x5d, 0x9e,
	0x07, 0xff, 0x3f, 0x7c, 0xe3, 0x9d, 0xf9, 0xbd, 0x99, 0x78, 0xf3, 0x2a, 0x08, 0xed, 0x67, 0x36,
	0xf8, 0x88, 0xe3, 0x18, 0x0c, 0x3a, 0x4d, 0x68, 0x2b, 0xfe, 0x2e, 0x27, 0x32, 0x6e, 0x21, 0xa5,
	0xd2, 0x94, 0xef, 0x52, 0xb1, 0xc1, 0x42, 0xfe, 0xc2, 0x3c, 0x29, 0x53, 0x9b, 0x94, 0x59, 0x8e,
	0xd6, 0x91, 0x54, 0xa8, 0xd0, 0xb7, 0x4f, 0xe1, 0xaf, 0x01, 0xab, 0x0b, 0x28, 0xc9, 0x49, 0x85,
	0xdf, 0x17, 0x77, 0xf8, 0x24, 0x1d, 0xd8, 0x3d, 0xd8, 0xf4, 0xbe, 0x17, 0xdf, 0x5e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x24, 0x13, 0xc2, 0x45, 0x40, 0x02, 0x00, 0x00,
}
